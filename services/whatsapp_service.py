import httpx
import asyncio
from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta
from loguru import logger
from config.settings import settings

class WhatsAppService:
    """Servi√ßo para integra√ß√£o com MEGA API WhatsApp - CENAT Semin√°rio DH"""
    
    def __init__(self):
        self.base_url = settings.MEGA_API_BASE_URL
        self.token = settings.MEGA_API_TOKEN
        self.instance_id = settings.MEGA_INSTANCE_ID
        self.headers = {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json"
        }
        
        # Rate limiting
        self.last_sent = {}
        self.min_interval = 5  # segundos entre mensagens
        
        # Informa√ß√µes do semin√°rio
        self.seminario_info = {
            "nome": "Semin√°rio Online: Direitos Humanos e Sa√∫de Mental das Popula√ß√µes Vulnerabilizadas",
            "data": "24 e 25 de Setembro de 2025",
            "horario": "19h √†s 22h",
            "plataforma": "DoityPlay",
            "valor": "R$ 19,97",
            "carga_horaria": "6 horas",
            "contato_vendas": "(47) 99242-8886",
            "email": "atendimento@cenatcursos.com.br"
        }
    
    def _digits_only(self, phone: str) -> str:
        """Remove tudo exceto d√≠gitos"""
        return "".join(ch for ch in phone if ch.isdigit())
    
    def _to_whatsapp_format(self, phone: str) -> str:
        """Converte telefone para formato WhatsApp"""
        digits = self._digits_only(phone)
        return f"{digits}@s.whatsapp.net" if digits else phone
    
    async def check_instance_status(self) -> Dict[str, Any]:
        """Verifica status da inst√¢ncia"""
        url = f"{self.base_url}/rest/instance/{self.instance_id}"
        
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                response = await client.get(url, headers=self.headers)
                response.raise_for_status()
                data = response.json()
                
                is_connected = bool(data.get("instance", {}).get("user"))
                logger.info(f"üì± Status da inst√¢ncia: {'Conectada' if is_connected else 'Desconectada'}")
                
                return {
                    "connected": is_connected,
                    "instance_data": data.get("instance", {}),
                    "user": data.get("instance", {}).get("user")
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar status: {e}")
            return {"connected": False, "error": str(e)}
    
    def _check_rate_limit(self, phone: str) -> bool:
        """Verifica se pode enviar mensagem (rate limiting)"""
        now = datetime.now()
        last_sent = self.last_sent.get(phone)
        
        if last_sent:
            time_diff = (now - last_sent).total_seconds()
            if time_diff < self.min_interval:
                logger.warning(f"‚è∞ Rate limit: aguardar {self.min_interval - time_diff:.0f}s para {phone}")
                return False
        
        return True
    
    async def send_text_message(self, phone: str, message: str) -> bool:
        """Envia mensagem de texto"""
        if not self._check_rate_limit(phone):
            return False
        
        url = f"{self.base_url}/rest/sendMessage/{self.instance_id}/text"
        to = self._to_whatsapp_format(phone)
        
        payload = {
            "messageData": {
                "to": to,
                "text": message
            }
        }
        
        try:
            async with httpx.AsyncClient(timeout=15) as client:
                response = await client.post(url, json=payload, headers=self.headers)
                response.raise_for_status()
                
                self.last_sent[phone] = datetime.now()
                logger.info(f"üì± Mensagem enviada para {phone}: {message[:50]}...")
                return True
                
        except httpx.HTTPStatusError as e:
            logger.error(f"‚ùå Erro HTTP {e.response.status_code} ao enviar para {phone}: {e.response.text}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar para {phone}: {e}")
            return False
    
    async def send_initial_contact(self, phone: str, name: str) -> bool:
        """Envia mensagem inicial de contato"""
        message = f"""Oi {name}! üëã 

Sou da equipe do CENAT e vi que voc√™ se interessou pelo nosso **Semin√°rio Online: Direitos Humanos e Sa√∫de Mental das Popula√ß√µes Vulnerabilizadas**.

üóìÔ∏è **Quando:** 24 e 25 de Setembro de 2025
‚è∞ **Hor√°rio:** 19h √†s 22h  
üíª **Onde:** Online pela DoityPlay
üí∞ **Investimento:** Apenas R$ 19,97
üéì **Certifica√ß√£o:** 6h com validade nacional

Para come√ßar nossa conversa, me conta: voc√™ atua em qual √°rea?

üîπ Sa√∫de Mental  
üîπ Educa√ß√£o  
üîπ Assist√™ncia Social  
üîπ Outra √°rea

Responde a√≠ que vou te explicar melhor sobre o semin√°rio! üòä"""
        
        return await self.send_text_message(phone, message)
    
    async def send_qualification_options(self, phone: str, name: str) -> bool:
        """Envia lista de qualifica√ß√£o"""
        sections = [
            {
                "title": "üéØ Em qual √°rea voc√™ atua?",
                "rows": [
                    {
                        "title": "üß† Sa√∫de Mental",
                        "description": "Psic√≥logo, psiquiatra, terapeuta ocupacional...",
                        "rowId": "area_saude_mental"
                    },
                    {
                        "title": "üè• Sa√∫de Geral",
                        "description": "Enfermeiro, m√©dico, t√©cnico...",
                        "rowId": "area_saude_geral"
                    },
                    {
                        "title": "üìö Educa√ß√£o",
                        "description": "Professor, pedagogo, coordenador...",
                        "rowId": "area_educacao"
                    },
                    {
                        "title": "ü§ù Assist√™ncia Social",
                        "description": "Assistente social, educador social...",
                        "rowId": "area_assistencia"
                    },
                    {
                        "title": "üìã Outra √°rea",
                        "description": "Gest√£o, direito, outras...",
                        "rowId": "area_outra"
                    }
                ]
            }
        ]
        
        return await self.send_list_message(
            phone=phone,
            button_text="Selecionar √Årea",
            text=f"Perfeito {name}! üòä\n\nPara te ajudar melhor com informa√ß√µes sobre o semin√°rio:",
            title="Vamos nos conhecer melhor!",
            description="Selecione sua √°rea de atua√ß√£o",
            sections=sections
        )
    
    async def send_interest_qualification(self, phone: str, name: str) -> bool:
        """Envia qualifica√ß√£o sobre interesse espec√≠fico"""
        sections = [
            {
                "title": "üîç O que mais te interessa no semin√°rio?",
                "rows": [
                    {
                        "title": "üë• Popula√ß√µes Vulnerabilizadas",
                        "description": "Trabalhar com grupos em situa√ß√£o de vulnerabilidade",
                        "rowId": "interesse_populacoes"
                    },
                    {
                        "title": "‚öñÔ∏è Direitos Humanos",
                        "description": "Compreender a interface DH x Sa√∫de Mental",
                        "rowId": "interesse_direitos"
                    },
                    {
                        "title": "üåà Diversidade e Inclus√£o",
                        "description": "Quest√µes de g√™nero, ra√ßa e sexualidade",
                        "rowId": "interesse_diversidade"
                    },
                    {
                        "title": "üéì Desenvolvimento Profissional",
                        "description": "Qualificar minha pr√°tica profissional",
                        "rowId": "interesse_desenvolvimento"
                    }
                ]
            }
        ]
        
        return await self.send_list_message(
            phone=phone,
            button_text="Escolher Interesse",
            text=f"√ìtimo {name}! üëè\n\nAgora me conta:",
            title="Qual seu maior interesse?",
            description="Isso vai me ajudar a personalizar as informa√ß√µes",
            sections=sections
        )
    
    async def send_seminario_details(self, phone: str, name: str, interest: str = None) -> bool:
        """Envia detalhes completos do semin√°rio"""
        message = f"""Perfeita escolha {name}! üéØ

Nosso **Semin√°rio de Direitos Humanos e Sa√∫de Mental** √© EXATAMENTE para profissionais como voc√™.

üìã **O QUE VOC√ä VAI APRENDER:**

üî∏ **24/09** - Direitos Humanos x Sa√∫de Mental (Luciana Alleluia)
üî∏ **24/09** - Ra√ßa, etnia e interseccionalidades (Rachel Gouveia)  
üî∏ **25/09** - Forma√ß√£o para popula√ß√µes vulnerabilizadas (Claudio Mann)
üî∏ **25/09** - G√™neros e Sexualidades (Marcos Signorelli)

üéØ **IDEAL PARA:**
‚úÖ Profissionais da sa√∫de, educa√ß√£o e assist√™ncia
‚úÖ Quem quer atendimento mais inclusivo e humanizado  
‚úÖ Desenvolver pr√°ticas que respeitam a diversidade

üí∞ **INVESTIMENTO:** Apenas R$ 19,97
üéì **CERTIFICA√á√ÉO:** 6h com validade nacional
üìö **B√îNUS:** E-book com material das palestras

Voc√™ tem interesse em garantir sua vaga?"""
        
        return await self.send_text_message(phone, message)
    
    async def send_objection_handling(self, phone: str, objection_type: str) -> bool:
        """Trata obje√ß√µes comuns"""
        messages = {
            "preco": """Entendo sua preocupa√ß√£o! üí∞

Olha s√≥: R$ 19,97 para 6h de certifica√ß√£o + 4 palestrantes especialistas + material exclusivo = menos de R$ 3,50 por hora de capacita√ß√£o!

√â um investimento simb√≥lico que cabe no or√ßamento de qualquer profissional. Pode at√© parcelar no cart√£o!

O conhecimento que voc√™ vai adquirir vale muito mais que isso. Topa garantir sua vaga?""",
            
            "tempo": """Eu entendo a correria do dia a dia! ‚è∞

Mas olha que legal: s√£o apenas 2 noites (24 e 25/09), das 19h √†s 22h. 

√â online, ent√£o voc√™ assiste de casa, sem tr√¢nsito. E fica gravado caso precise assistir depois!

S√£o s√≥ 6h que podem transformar sua pr√°tica profissional. Vale muito a pena, n√£o acha?""",
            
            "relevancia": """Totalmente relevante para voc√™! üéØ

Hoje em dia TODOS os profissionais precisam saber lidar com diversidade e direitos humanos. √â exig√™ncia do mercado!

Seja na sa√∫de, educa√ß√£o ou assist√™ncia, voc√™ vai atender pessoas LGBTI+, de diferentes ra√ßas, em situa√ß√£o de vulnerabilidade...

Esse conhecimento vai te diferenciar e te preparar melhor. Faz sentido?"""
        }
        
        message = messages.get(objection_type, messages["relevancia"])
        return await self.send_text_message(phone, message)
    
    async def send_urgency_and_close(self, phone: str, name: str) -> bool:
        """Cria urg√™ncia e fecha a venda"""
        message = f"""‚ö†Ô∏è **ATEN√á√ÉO {name}!**

As inscri√ß√µes s√£o **LIMITADAS** e podem encerrar antes do prazo!

J√° temos mais de 59 mil pessoas impactadas pelos eventos do CENAT. Esse semin√°rio promete lotar rapidinho! üî•

üéØ **PARA GARANTIR SUA VAGA:**

1Ô∏è‚É£ Acesse: cenatsaudemental.com/seminario-online-dh-e-populacoes-vulnerabilizadas

2Ô∏è‚É£ Ou fale direto comigo no WhatsApp: {self.seminario_info["contato_vendas"]}

3Ô∏è‚É£ **PIX, boleto ou cart√£o em at√© 12x**

N√£o deixe essa oportunidade passar! Sua carreira merece esse investimento.

Vai garantir sua vaga agora? üòä"""
        
        return await self.send_text_message(phone, message)
    
    async def send_contact_info(self, phone: str) -> bool:
        """Envia informa√ß√µes de contato"""
        return await self.send_contact_message(
            phone=phone,
            contact_name="CENAT - Equipe Comercial",
            contact_phone="5547992428886",
            organization="CENAT Sa√∫de Mental"
        )
    
    async def send_list_message(self, phone: str, button_text: str, text: str, 
                               title: str, description: str, sections: List[Dict]) -> bool:
        """Envia mensagem com lista de op√ß√µes"""
        if not self._check_rate_limit(phone):
            return False
        
        url = f"{self.base_url}/rest/sendMessage/{self.instance_id}/listMessage"
        to = self._to_whatsapp_format(phone)
        
        payload = {
            "messageData": {
                "to": to,
                "buttonText": button_text,
                "text": text,
                "title": title,
                "description": description,
                "sections": sections,
                "listType": 0
            }
        }
        
        try:
            async with httpx.AsyncClient(timeout=15) as client:
                response = await client.post(url, json=payload, headers=self.headers)
                response.raise_for_status()
                
                self.last_sent[phone] = datetime.now()
                logger.info(f"üìã Lista enviada para {phone}: {title}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar lista para {phone}: {e}")
            return False
    
    async def send_contact_message(self, phone: str, contact_name: str, 
                                 contact_phone: str, organization: str = None) -> bool:
        """Envia cart√£o de contato"""
        if not self._check_rate_limit(phone):
            return False
        
        url = f"{self.base_url}/rest/sendMessage/{self.instance_id}/contactMessage"
        to = self._to_whatsapp_format(phone)
        
        payload = {
            "messageData": {
                "to": to,
                "vcard": {
                    "fullName": contact_name,
                    "displayName": contact_name,
                    "organization": organization or contact_name,
                    "phoneNumber": contact_phone
                }
            }
        }
        
        try:
            async with httpx.AsyncClient(timeout=15) as client:
                response = await client.post(url, json=payload, headers=self.headers)
                response.raise_for_status()
                
                self.last_sent[phone] = datetime.now()
                logger.info(f"üë§ Contato enviado para {phone}: {contact_name}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar contato para {phone}: {e}")
            return False

# Inst√¢ncia global
whatsapp_service = WhatsAppService()